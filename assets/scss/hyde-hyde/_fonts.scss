// https://goo.gl/cNwJ1q 
//
$base-url: '/public/';
$used-fonts: ();

$base-font-stack: (
  // Sans-serif
  
  helvetica: (
    light: (
      family: (Helvetica Neue, Helvetica, Arial, sans-serif),
      weight: 200,
      style: normal,
      font-face: (
        family: 'Helvetica Neue',
        path: 'HelveticaNeue/HelveticaNeue-Light',
        formats: (eot woff ttf svg)
      )
    ),
    light-italic: (
      family: (Helvetica Neue, Helvetica, Arial, sans-serif),
      weight: 200,
      style: italic,
      font-face: (
        family: 'Helvetica Neue',
        path: 'HelveticaNeue/HelveticaNeue-LightItalic',
        formats: (eot woff ttf svg)
      )
    ),
    regular: (
      family: (Helvetica Neue, Helvetica, Arial, sans-serif),
      weight: 400,
      style: normal,
      font-face: (
        family: 'Helvetica Neue',
        path: 'HelveticaNeue/HelveticaNeue-Regular',
        formats: (eot woff ttf svg)
      )
    ),
    regular-italic: (
      family: (Helvetica Neue, Helvetica, Arial, sans-serif),
      weight: 400,
      style: italic,
      font-face: (
        family: 'Helvetica Neue',
        path: 'HelveticaNeue/HelveticaNeue-RegularItalic',
        formats: (eot woff ttf svg)
      )
    ),
    bold: (
      family: (Helvetica Neue, Helvetica, Arial, sans-serif),
      weight: 700,
      style: normal,
      font-face: (
        family: 'Helvetica Neue',
        path: 'HelveticaNeue/HelveticaNeue-Bold',
        formats: (eot woff ttf svg)
      )
    ),
    bold-italic: (
      family: (Helvetica Neue, Helvetica, Arial, sans-serif),
      weight: 700,
      style: italic,
      font-face: (
        family: 'Helvetica Neue',
        path: 'HelveticaNeue/HelveticaNeue-BoldItalic',
        formats: (eot woff ttf svg)
      )
    ),
  ),

  // Serif
  georgia: (
    regular: (
      family: (Georgia, Times, Times New Roman, serif),
      weight: 400,
      style: normal
    ),
    regular-italic: (
      family: (Georgia, Times, Times New Roman, serif),
      weight: 400,
      style: italic
    ),
  ),
);

/// Fetch nested keys
///
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
///
/// @return {*}
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    @if type-of($map) != "map" {
      @warn '`#{$map}` is not a map.';
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return $map;
}

/// Checks if a list contains a value(s).
///
/// @param {List} $list - The list to check against.
/// @param {List} $values - A single value or list of values to check for.
///
/// @example
///   contains($list, $value)
///
/// @return {Bool}
@function contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != 'number' {
      @return false;
    }
  }

  @return true;
}

/// Returns URL to a font based on its path
///
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return url($base + 'fonts/' + $path);
}

/// Font styling shorthand
///
/// @param {String} $group
/// @param {String} $variant
/// @param {Map} $properties
/// @param {Map} $font-stack (optional)
///
/// @example
///  @include font(helvetica, bold);
///
/// @requires {function} font-properties
@mixin font($group, $variant: regular, $properties: family weight style, $font-stack: $base-font-stack){
  $font-properties: map-deep-get($font-stack, $group, $variant);

  @if $font-properties {
    @include track-fonts($group, $variant);
    @each $key, $value in $font-properties {
      @if contains($properties, $key) {
        font-#{$key}: $value;
      }
    }
  }
}

/// Track all fonts and variations used in the stylesheet
/// Check if this combination already exists in the map.
/// If not, we add it to the map.
///
/// @param {String} $group
/// @param {String} $variant
///
/// @requires {Map} used-fonts
@mixin track-fonts($group, $variant) {
  // First check if we already knew this one:
  @if map-has-key($used-fonts, $group) == false {
    // Font-family isn't in the map yet, so add it.
    // The key for the nested map is the font name:
    $used-fonts: map-merge($used-fonts, ($group: ())) !global;
  }

  // Now check if the variation is known
  $font-map: map-get($used-fonts, $group);
  @if index($font-map, $variant) == null {
    // Variation isn't in the map yet, so add it:
    $variations: append($font-map, $variant);
    $used-fonts: map-merge($used-fonts, ($group: $variations)) !global;
  }
}

/// Add the font-face rules for all used fonts
/// @return {String} font-face rules
///
/// @requires {function} map-deep-get
/// @requires {function} font-face
@mixin import-fonts($font-stack: $base-font-stack) {
  @each $group, $variations in $used-fonts {
    @each $variant in $variations {
      $font-properties: map-deep-get($font-stack, $group, $variant);

      @if $font-properties {
        // If we have a font-face key we create the font-face rule
        $font-face: map-get($font-properties, font-face);
        @if $font-face {
          $font-family: map-get($font-face, family);
          $file-path: map-get($font-face, path);
          $file-formats: map-get($font-face, formats);
          $font-weight: map-get($font-properties, weight);
          $font-style: map-get($font-properties, style);

          @if $file-formats {
            @include font-face($font-family, $file-path, $font-weight, $font-style, $file-formats);
          } @else {
            @include font-face($font-family, $file-path, $font-weight, $font-style);
          }
        }
      }
    }
  }
}

/// Add a font-face rule
/// @return {String} font-face rule
///
/// @requires {function} font-source-declaration
@mixin font-face($font-family, $file-path, $font-weight: 400, $font-style: normal, $file-formats: eot woff2 woff ttf svg) {
  @font-face {
    font-family: $font-family;
    font-style: $font-style;
    font-weight: $font-weight;

    src: font-source-declaration($font-family, $file-path, $file-formats);
  }
}

/// Used for creating the source string for fonts using @font-face
/// Reference: http://goo.gl/Ru1bKP
///
/// @requires {function} font
@function font-source-declaration($font-family, $file-path, $file-formats) {
  $src: ();

  $formats-map: (
    eot:   '#{$file-path}.eot?#iefix' format('embedded-opentype'),
    woff2: '#{$file-path}.woff2' format('woff2'),
    woff:  '#{$file-path}.woff' format('woff'),
    ttf:   '#{$file-path}.ttf' format('truetype'),
    svg:   '#{$file-path}.svg##{$font-family}' format('svg')
  );

  @each $key, $values in $formats-map {
    @if contains($file-formats, $key) {
      $file-path: nth($values, 1);
      $font-format: nth($values, 2);
      $src: append($src, font($file-path) $font-format, comma);
    }
  }

  @return $src;
}

// Example CSS declaration
/*
h1 {
  @include font(helvetica, bold);
}

h1 .caption {
  @include font(helvetica, light-italic, weight style);
}

p {
  @include font(helvetica, regular);
}

p i {
  @include font(helvetica, regular-italic, style);
}

p b {
  @include font(helvetica, bold, weight);
}

blockquote {
  @include font(georgia);
}

/// Import fonts
@include import-fonts();
*/